{"version":3,"file":"plugin.min.js","sources":["../src/plugin.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny html_component plugin for moodle.\n * @module      tiny_html_components/plugin\n * @copyright   2023 Gerbault Cédric, Anthony Durif, Université Clermont Auvergne\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import {getTinyMCE} from 'editor_tiny/loader';\n// import {getPluginMetadata} from 'editor_tiny/utils';\n\n// import {component, pluginName} from './common';\n// import * as Commands from './commands';\n// import * as Configuration from './configuration';\n// import * as Options from './options';\n\n\n// // Setup the tiny_html_components Plugin to add a button and menu option.\n// export default new Promise(async(resolve) => {\n//     const [\n//         tinyMCE,\n//         setupCommands,\n//         pluginMetadata,\n//     ] = await Promise.all([\n//         getTinyMCE(),\n//         Commands.getSetup(),\n//         getPluginMetadata(component, pluginName),\n//     ]);\n//     // Note: The PluginManager.add function does not accept a Promise.\n//     // Any asynchronous code must be run before this point.\n//     tinyMCE.PluginManager.add(`${component}/plugin`, (editor) => {\n//         Options.register(editor);\n//         // Setup the Commands (buttons, menu items, and so on).\n//         setupCommands(editor);\n//         return pluginMetadata;\n//     });\n//     // Resolve the htmltiny_html_components Plugin and include configuration.\n//     resolve([`${component}/plugin`, Configuration]);\n// });\n\n\nimport { getTinyMCE } from \"editor_tiny/loader\";\nimport { getPluginMetadata } from \"editor_tiny/utils\";\n\nimport { component, pluginName } from \"./common\";\nimport * as Commands from \"./commands\";\nimport * as Configuration from \"./configuration\";\nimport * as Options from \"./options\";\n\n// Async function to initialize the plugin.\nasync function initPlugin() {\n  const [tinyMCE, setupCommands, pluginMetadata] = await Promise.all([\n    getTinyMCE(),\n    Commands.getSetup(),\n    getPluginMetadata(component, pluginName),\n  ]);\n\n  // PluginManager.add cannot accept a Promise.\n  tinyMCE.PluginManager.add(`${component}/plugin`, (editor) => {\n    Options.register(editor);\n    setupCommands(editor);\n    return pluginMetadata;\n  });\n\n  return [`${component}/plugin`, Configuration];\n}\n\n// Export a Promise without using `async` inside `new Promise()`\nexport default new Promise((resolve) => {\n  initPlugin()\n    .then(resolve)\n    .catch((err) => {\n      console.error(\"Error initializing plugin:\", err);\n    });\n});"],"names":["Promise","resolve","tinyMCE","setupCommands","pluginMetadata","all","Commands","getSetup","component","pluginName","PluginManager","add","editor","Options","register","Configuration","initPlugin","then","catch","err","console","error"],"mappings":";;;;;;2OAkFe,IAAIA,SAASC,kCAjBnBC,QAASC,cAAeC,sBAAwBJ,QAAQK,IAAI,EACjE,wBACAC,SAASC,YACT,4BAAkBC,kBAAWC,6BAI/BP,QAAQQ,cAAcC,cAAOH,8BAAqBI,SAChDC,QAAQC,SAASF,QACjBT,cAAcS,QACPR,kBAGF,WAAII,6BAAoBO,gBAK/BC,GACGC,KAAKhB,SACLiB,OAAOC,MACNC,QAAQC,MAAM,6BAA8BF"}