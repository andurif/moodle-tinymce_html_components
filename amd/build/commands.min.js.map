{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny html_component configuration.\n * @module      tiny_html_components/commands\n * @copyright   2023 Gerbault Cédric, Anthony Durif, Université Clermont Auvergne\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import {getButtonImage} from 'editor_tiny/utils';\n// import {handleAction} from './ui';\n// import {get_string as getString} from 'core/str';\n// import {\n//     component,\n//     buttonName,\n//     icon,\n// } from './common';\n\n// export const getSetup = async() => {\n//     const [\n//         buttonText,\n//         buttonImage,\n//     ] = await Promise.all([\n//         getString('addhtml_components', component),\n//         getButtonImage('icon', component),\n//     ]);\n\n//     return (editor) => {\n//         // Register the Filter WS Icon.\n//         editor.ui.registry.addIcon(icon, buttonImage.html);\n//         // Register the Menu Button.\n//         editor.ui.registry.addButton(buttonName, {\n//             icon,\n//             tooltip: buttonText,\n//             onAction: () => handleAction(editor),\n//         });\n\n//         // Add the Filter WS Menu Item.\n//         // This allows it to be added to a standard menu, or a context menu.\n//         editor.ui.registry.addMenuItem(buttonName, {\n//             icon,\n//             text: buttonText,\n//             onAction: () => handleAction(editor),\n//         });\n//     };\n// };\n\n\n\n\n/* eslint-disable no-console */\n\ndefine([\n    'editor_tiny/utils',\n    'core/str',\n    'tiny_html_components/ui',\n    'tiny_html_components/common'\n], function(utils, str, ui, common) {\n    'use strict';\n\n    console.log(\"working: tiny_html_components/commands is loaded\");\n\n    const {getButtonImage} = utils;\n    const {handleAction} = ui;\n    const {get_string: getString} = str;\n    const {component, buttonName, icon} = common;\n\n    const getSetup = function() {\n        console.log(\"working: TinyMCE plugin setup started\");\n\n        return function(editor) {\n            console.log(\"working: TinyMCE editor instance detected\");\n\n            // Load text and image resources asynchronously.\n            Promise.all([\n                getString('addhtml_components', component),\n                getButtonImage('icon', component),\n            ]).then(([buttonText, buttonImage]) => {\n                // Register the Filter WS Icon.\n                editor.ui.registry.addIcon(icon, buttonImage.html);\n\n                // Register the Menu Button.\n                editor.ui.registry.addButton(buttonName, {\n                    icon,\n                    tooltip: buttonText,\n                    onAction: () => handleAction(editor),\n                });\n\n                // Add the Filter WS Menu Item (for menus and context menus).\n                editor.ui.registry.addMenuItem(buttonName, {\n                    icon,\n                    text: buttonText,\n                    onAction: () => handleAction(editor),\n                });\n\n                console.log(\"working: TinyMCE plugin setup complete\");\n            }).catch(error => {\n                console.error(\"Error in TinyMCE plugin setup:\", error);\n            });\n        };\n    };\n\n    // Return the module as an AMD-compatible object.\n    return {\n        getSetup: getSetup\n    };\n});\n"],"names":["define","utils","str","ui","common","console","log","getButtonImage","handleAction","get_string","getString","component","buttonName","icon","getSetup","editor","Promise","all","then","_ref","buttonText","buttonImage","registry","addIcon","html","addButton","tooltip","onAction","addMenuItem","text","catch","error"],"mappings":";;;;;;AAiEAA,uCAAO,CACH,oBACA,WACA,0BACA,gCACD,SAASC,MAAOC,IAAKC,GAAIC,QAGxBC,QAAQC,IAAI,0DAENC,eAACA,gBAAkBN,OACnBO,aAACA,cAAgBL,IAChBM,WAAYC,WAAaR,KAC1BS,UAACA,UAADC,WAAYA,WAAZC,KAAwBA,MAAQT,aAsC/B,CACHU,SArCa,kBACbT,QAAQC,IAAI,yCAEL,SAASS,QACZV,QAAQC,IAAI,6CAGZU,QAAQC,IAAI,CACRP,UAAU,qBAAsBC,WAChCJ,eAAe,OAAQI,aACxBO,MAAKC,WAAEC,WAAYC,kBAElBN,OAAOZ,GAAGmB,SAASC,QAAQV,KAAMQ,YAAYG,MAG7CT,OAAOZ,GAAGmB,SAASG,UAAUb,WAAY,CACrCC,KAAAA,KACAa,QAASN,WACTO,SAAU,IAAMnB,aAAaO,UAIjCA,OAAOZ,GAAGmB,SAASM,YAAYhB,WAAY,CACvCC,KAAAA,KACAgB,KAAMT,WACNO,SAAU,IAAMnB,aAAaO,UAGjCV,QAAQC,IAAI,6CACbwB,OAAMC,QACL1B,QAAQ0B,MAAM,iCAAkCA"}