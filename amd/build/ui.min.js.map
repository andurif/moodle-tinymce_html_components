{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny html_component modal display and event management.\n * @module      tiny_html_components/ui\n * @copyright   2023 Gerbault Cédric, Anthony Durif, Université Clermont Auvergne\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\nimport Templates from 'core/templates';\nimport url from 'core/url';\nimport  {getCustomComponents} from './options';\nimport {get_string as getString} from 'core/str';\nimport {exception as displayException} from 'core/notification';\nimport Modal from 'tiny_html_components/modal';\nimport ModalEvents from 'core/modal_events';\nimport ModalFactory from 'core/modal_factory';\nimport {components} from 'tiny_html_components/components';\n\n\n\nexport const handleAction = (editor) => {\n    displayDialogue(editor);\n};\n\n\n/**\n * Get the template context for the dialogue.\n *\n * @param {Editor} editor\n * @returns {object} data\n */\nconst getTemplateContext = async(editor) => {\n    let selectList = [];\n    let promise = [];\n    let customGroup = false;\n    let customComponent = [];\n\n    components.forEach(item => {\n        promise.push(\n        getString(item.name,'tiny_html_components'));\n    });\n    if(typeof getCustomComponents(editor) !== 'undefined'){\n        customComponent = JSON.parse(getCustomComponents(editor));\n        customGroup = true;\n    }\n    await Promise.all(promise)\n    .then ((values)=>{\n        values.forEach((element,index) => {\n            let params ={};\n            params.id = components[index].id;\n            params.string = element;\n            selectList.push(params);\n        });\n    });\n    const customUrl = await url.fileUrl(\"/lib/editor/tiny/plugins/html_components/custom_components.php\",\"\");\n    return Object.assign({},{selectList},{customUrl},{customComponent},{customGroup});\n};\n\n\n\n/**\n * Generate and diplay the Dialogue, then add eventListeners.\n *\n * @param {Editor} editor\n */\nconst displayDialogue = async(editor) => {\n    const modal = await ModalFactory.create({\n        type: Modal.TYPE,\n        templateContext: await getTemplateContext(editor),\n        large: true,\n    });\n    modal.show();\n    const $root = modal.getRoot();\n    const root = $root[0];\n    root.addEventListener('change', (event) => {\n        handleModalChange(event, modal, editor);\n    });\n    $root.on(ModalEvents.save,(event,modal)=>{\n        handleDialogueSubmission(editor, modal);\n    });\n};\n\n/**\n * Handle the change in options and adjust correlated preview at the same time\n * @param {Event} event\n * @param {Modal} modal\n */\nconst handleModalChange = async (event,modal) => {\n    const preview = modal.getRoot()[0].querySelector('#component_preview');\n    const options = modal.getRoot()[0].querySelector('#options-placeholder');\n    switch(event.target.dataset.holder){\n        case 'component-selector':{\n            preview.innerHTML = \"\";\n            const selected = components[event.target.value];\n            if(event.target.value == 'custom'){\n                var txt = document.createElement(\"textarea\");\n                txt.innerHTML = event.target.options[event.target.selectedIndex].dataset.content;\n                preview.innerHTML = txt.value + '&nbsp';\n            }\n            else{\n                if(selected.params){\n                    await Templates.renderForPromise(`tiny_html_components/components/${selected.name}`,{})\n                    .then(({html,js})=>{\n                        Templates.replaceNodeContents('#options-placeholder',html,js);\n                    }).catch((error) => displayException(error));\n                }\n                else {\n                    options.innerHTML = \"\";\n                }\n                preview.innerHTML = selected.code() + '&nbsp';\n            }\n        break;\n        }\n        case 'params':{\n            refreshPreview(preview);\n        break;\n        }\n        case 'options':{\n                toggleTargetVisibility(event,'toggle');\n                refreshPreview(preview);\n        break;\n        }\n    }\n};\n\n/**\n * Handle the dialogue submission, inserting at the caret position the content previewed\n * @param {Editor} editor\n * @param {Modal} modal\n */\nconst handleDialogueSubmission = (editor,modal) => {\n\n   const contentToAdd = modal.getRoot()[0].querySelector('#component_preview');\n    editor.insertContent(contentToAdd.innerHTML);\n    editor.save();\n    modal.destroy();\n};\n\nconst refreshPreview =(preview)=>{\n    preview.innerHTML= \"\";\n    let parentComp = components[document.getElementById('component').value];\n    preview.innerHTML =  parentComp.code() + '&nbsp';\n};\n\nconst toggleTargetVisibility= (event) =>{\n    const target = event.target.dataset.target;\n    const element = document.getElementById(target);\n    element.classList.toggle('d-none');\n};\n\n"],"names":["editor","displayDialogue","getTemplateContext","async","selectList","promise","customGroup","customComponent","forEach","item","push","name","JSON","parse","Promise","all","then","values","element","index","params","id","components","string","customUrl","url","fileUrl","Object","assign","modal","ModalFactory","create","type","Modal","TYPE","templateContext","large","show","$root","getRoot","addEventListener","event","handleModalChange","on","ModalEvents","save","handleDialogueSubmission","preview","querySelector","options","target","dataset","holder","innerHTML","selected","value","txt","document","createElement","selectedIndex","content","Templates","renderForPromise","_ref","html","js","replaceNodeContents","catch","error","code","refreshPreview","toggleTargetVisibility","contentToAdd","insertContent","destroy","parentComp","getElementById","classList","toggle"],"mappings":";;;;;;gVAmC6BA,SACzBC,gBAAgBD,eAUdE,mBAAqBC,MAAAA,aACnBC,WAAa,GACbC,QAAU,GACVC,aAAc,EACdC,gBAAkB,0BAEXC,SAAQC,OACfJ,QAAQK,MACR,mBAAUD,KAAKE,KAAK,iCAEkB,KAAhC,gCAAoBX,UAC1BO,gBAAkBK,KAAKC,OAAM,gCAAoBb,SACjDM,aAAc,SAEZQ,QAAQC,IAAIV,SACjBW,MAAOC,SACJA,OAAOT,SAAQ,CAACU,QAAQC,aAChBC,OAAQ,GACZA,OAAOC,GAAKC,uBAAWH,OAAOE,GAC9BD,OAAOG,OAASL,QAChBd,WAAWM,KAAKU,oBAGlBI,gBAAkBC,aAAIC,QAAQ,iEAAiE,WAC9FC,OAAOC,OAAO,GAAG,CAACxB,WAAAA,YAAY,CAACoB,UAAAA,WAAW,CAACjB,gBAAAA,iBAAiB,CAACD,YAAAA,eAUlEL,gBAAkBE,MAAAA,eACd0B,YAAcC,uBAAaC,OAAO,CACpCC,KAAMC,eAAMC,KACZC,sBAAuBjC,mBAAmBF,QAC1CoC,OAAO,IAEXP,MAAMQ,aACAC,MAAQT,MAAMU,UACPD,MAAM,GACdE,iBAAiB,UAAWC,QAC7BC,kBAAkBD,MAAOZ,MAAO7B,WAEpCsC,MAAMK,GAAGC,sBAAYC,MAAK,CAACJ,MAAMZ,SAC7BiB,yBAAyB9C,OAAQ6B,WASnCa,kBAAoBvC,MAAOsC,MAAMZ,eAC7BkB,QAAUlB,MAAMU,UAAU,GAAGS,cAAc,sBAC3CC,QAAUpB,MAAMU,UAAU,GAAGS,cAAc,+BAC1CP,MAAMS,OAAOC,QAAQC,YACnB,sBACDL,QAAQM,UAAY,SACdC,SAAWhC,uBAAWmB,MAAMS,OAAOK,UAChB,UAAtBd,MAAMS,OAAOK,MAAkB,KAC1BC,IAAMC,SAASC,cAAc,YACjCF,IAAIH,UAAYZ,MAAMS,OAAOD,QAAQR,MAAMS,OAAOS,eAAeR,QAAQS,QACzEb,QAAQM,UAAYG,IAAID,MAAQ,aAG7BD,SAASlC,aACFyC,mBAAUC,2DAAoDR,SAAS3C,MAAO,IACnFK,MAAK+C,WAACC,KAACA,KAADC,GAAMA,4BACCC,oBAAoB,uBAAuBF,KAAKC,OAC3DE,OAAOC,QAAU,2BAAiBA,SAGrCnB,QAAQI,UAAY,GAExBN,QAAQM,UAAYC,SAASe,OAAS,kBAIzC,SACDC,eAAevB,mBAGd,UACGwB,uBAAuB9B,MAAM,UAC7B6B,eAAevB,WAWzBD,yBAA2B,CAAC9C,OAAO6B,eAEhC2C,aAAe3C,MAAMU,UAAU,GAAGS,cAAc,sBACrDhD,OAAOyE,cAAcD,aAAanB,WAClCrD,OAAO6C,OACPhB,MAAM6C,WAGJJ,eAAiBvB,UACnBA,QAAQM,UAAW,OACfsB,WAAarD,uBAAWmC,SAASmB,eAAe,aAAarB,OACjER,QAAQM,UAAasB,WAAWN,OAAS,SAGvCE,uBAAyB9B,cACrBS,OAAST,MAAMS,OAAOC,QAAQD,OACpBO,SAASmB,eAAe1B,QAChC2B,UAAUC,OAAO"}